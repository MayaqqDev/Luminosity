plugins {
    id 'fabric-loom' version '1.2-SNAPSHOT'
    id 'maven-publish'
}

version = project.mod_version
group = project.maven_group

repositories {
    maven { url = "https://jitpack.io" } // Spectrum
    // Spectrum Repos
    maven { url = "https://jitpack.io" } // Arrowhead, Dimensional Reverb, Step Height Entity Attribute
    maven { url = "https://maven.shedaniel.me/" } // Cloth Config, REI
    maven { url = "https://maven.terraformersmc.com/" } // Modmenu, EMI
    maven { url = "https://maven.nucleoid.xyz/" } // Common Protection API
    maven { url = "https://maven.blamejared.com" } // Patchouli
    maven { url = "https://maven.ladysnake.org/releases" } // Cardinal Components API
    maven { url = "https://maven.jamieswhiteshirt.com/libs-release/" } // Entity Reach Attribute
    maven { url = "https://api.modrinth.com/maven" } // Revelationary, Additional Entity Attributes, Fractal Lib, Colorful Hearts
    maven { url = "https://cfa2.cursemaven.com" }
    maven { url = "https://repo.unascribed.com" } // Ears API
    mavenCentral()
}

dependencies {
    minecraft ("com.mojang:minecraft:${project.minecraft_version}")
    mappings ("net.fabricmc:yarn:${project.yarn_mappings}:v2")
    modImplementation ("net.fabricmc:fabric-loader:${project.loader_version}")

    modImplementation ("net.fabricmc.fabric-api:fabric-api:${project.fabric_version}")

    modImplementation ("com.github.DaFuqs:Spectrum:${project.spectrum_version}")
    modImplementation ("maven.modrinth:revelationary:${project.revelationary_version}")


    switch (recipe_viewer.toLowerCase(Locale.ROOT)) {
        case "rei": modLocalRuntime("me.shedaniel:RoughlyEnoughItems-fabric:${rei_version}"); break
        case "emi": modLocalRuntime("dev.emi:emi-fabric:${emi_version}"); break
        case "disabled": break
        default: println("Unknown recipe viewer specified: $recipe_viewer. Must be EMI, REI or disabled.")
    }
}

processResources {
    inputs.property "version", project.version
    inputs.property "minecraft_version", project.minecraft_version
    inputs.property "loader_version", project.loader_version
    filteringCharset "UTF-8"

    filesMatching("fabric.mod.json") {
        expand "version": project.version,
                "minecraft_version": project.minecraft_version,
                "loader_version": project.loader_version
    }
}

def targetJavaVersion = 17
tasks.withType(JavaCompile).configureEach {
    it.options.encoding = "UTF-8"
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        it.options.release = targetJavaVersion
    }
}

java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
    archivesBaseName = project.archives_base_name
    withSourcesJar()
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}" }
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }

    repositories {}
}

loom {
    runs {
        datagenClient {
            inherit client
            name "Data Generation"
            vmArg "-Dfabric-api.datagen"
            vmArg "-Dfabric-api.datagen.output-dir=${file("src/main/generated")}"
            vmArg "-Dfabric-api.datagen.modid=${mod_id}"

            runDir "build/datagen"
        }
    }
    runs {
        mixinDebug {
            inherit client
            name "Mixin Debug"
            vmArg("-Dmixin.debug.export=true")
        }
    }
}

// Add the generated sources to the fabric resources
sourceSets {
    main {
        resources {
            srcDirs += [
                    'src/main/generated'
            ]
        }
    }
}
